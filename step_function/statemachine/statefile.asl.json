{
    "Comment": "A description of my state machine",
    "StartAt": "System Overload",
    "States": {
      "System Overload": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.math_random",
        "Parameters": {
          "Payload.$": "$"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "System Overload Checker"
      },
      "System Overload Checker": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.math_random",
            "NumericLessThan": 0.5,
            "Next": "Wait 1 minute"
          },
          {
            "Variable": "$.math_random",
            "NumericGreaterThanEquals": 0.5,
            "Next": "API Gateway Invoke"
          }
        ]
      },
      "Wait 1 minute": {
        "Type": "Wait",
        "Seconds": 1,
        "Next": "System Overload",
        "Comment": "system overload wait for 1 second"
      },
      "API Gateway Invoke": {
        "Type": "Task",
        "Resource": "arn:aws:states:::apigateway:invoke",
        "Parameters": {
          "ApiEndpoint": "MyApiId.execute-api.us-east-1.amazonaws.com",
          "Method": "POST",
          "Headers": {
            "Header1": [
              "HeaderValue1"
            ],
            "Header2": [
              "HeaderValue2",
              "HeaderValue3"
            ]
          },
          "Stage": "prod",
          "Path": "/pets/dog/1",
          "QueryParameters": {
            "QueryParameter1": [
              "QueryParameterValue1"
            ],
            "QueryParameter2": [
              "QueryParameterValue2",
              "QueryParameterValue3"
            ]
          },
          "RequestBody": {
            "Payload": "Hello from Step Functions!"
          },
          "AuthType": "IAM_ROLE"
        },
        "Next": "Processing Checker"
      },
      "Processing Checker": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.status",
            "StringMatches": "success",
            "Next": "handle success"
          },
          {
            "Variable": "$.status",
            "StringMatches": "failure",
            "Next": "handle failure"
          },
          {
            "Variable": "$.status",
            "StringMatches": "in-progress",
            "Next": "API Gateway Invoke"
          }
        ]
      },
      "handle success": {
         "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.math_random",
        "Parameters": {
          "Payload.$": "$"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "End": true
      },
      "handle failure": {
         "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.math_random",
        "Parameters": {
          "Payload.$": "$"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "End": true
      }
    }
  }